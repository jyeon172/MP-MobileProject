// Generated by view binder compiler. Do not edit!
package com.example.project.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.project.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class MainMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final RecyclerView mainBoard2RecyclerView;

  @NonNull
  public final TextView mainBoard2Title;

  @NonNull
  public final RecyclerView mainBoard3RecyclerView;

  @NonNull
  public final TextView mainBoard3Title;

  private MainMainBinding(@NonNull ConstraintLayout rootView,
      @NonNull RecyclerView mainBoard2RecyclerView, @NonNull TextView mainBoard2Title,
      @NonNull RecyclerView mainBoard3RecyclerView, @NonNull TextView mainBoard3Title) {
    this.rootView = rootView;
    this.mainBoard2RecyclerView = mainBoard2RecyclerView;
    this.mainBoard2Title = mainBoard2Title;
    this.mainBoard3RecyclerView = mainBoard3RecyclerView;
    this.mainBoard3Title = mainBoard3Title;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static MainMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static MainMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.main_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static MainMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.mainBoard2RecyclerView;
      RecyclerView mainBoard2RecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (mainBoard2RecyclerView == null) {
        break missingId;
      }

      id = R.id.mainBoard2Title;
      TextView mainBoard2Title = ViewBindings.findChildViewById(rootView, id);
      if (mainBoard2Title == null) {
        break missingId;
      }

      id = R.id.mainBoard3RecyclerView;
      RecyclerView mainBoard3RecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (mainBoard3RecyclerView == null) {
        break missingId;
      }

      id = R.id.mainBoard3Title;
      TextView mainBoard3Title = ViewBindings.findChildViewById(rootView, id);
      if (mainBoard3Title == null) {
        break missingId;
      }

      return new MainMainBinding((ConstraintLayout) rootView, mainBoard2RecyclerView,
          mainBoard2Title, mainBoard3RecyclerView, mainBoard3Title);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
