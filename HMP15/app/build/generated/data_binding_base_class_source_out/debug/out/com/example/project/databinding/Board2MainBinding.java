// Generated by view binder compiler. Do not edit!
package com.example.project.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.Spinner;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.project.R;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class Board2MainBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final FloatingActionButton addFab2;

  @NonNull
  public final Toolbar board2Toolbar;

  @NonNull
  public final RecyclerView main2RecyclerView;

  @NonNull
  public final Spinner spinner2;

  private Board2MainBinding(@NonNull LinearLayout rootView, @NonNull FloatingActionButton addFab2,
      @NonNull Toolbar board2Toolbar, @NonNull RecyclerView main2RecyclerView,
      @NonNull Spinner spinner2) {
    this.rootView = rootView;
    this.addFab2 = addFab2;
    this.board2Toolbar = board2Toolbar;
    this.main2RecyclerView = main2RecyclerView;
    this.spinner2 = spinner2;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static Board2MainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static Board2MainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.board2_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static Board2MainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addFab2;
      FloatingActionButton addFab2 = ViewBindings.findChildViewById(rootView, id);
      if (addFab2 == null) {
        break missingId;
      }

      id = R.id.board2_toolbar;
      Toolbar board2Toolbar = ViewBindings.findChildViewById(rootView, id);
      if (board2Toolbar == null) {
        break missingId;
      }

      id = R.id.main2RecyclerView;
      RecyclerView main2RecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (main2RecyclerView == null) {
        break missingId;
      }

      id = R.id.spinner2;
      Spinner spinner2 = ViewBindings.findChildViewById(rootView, id);
      if (spinner2 == null) {
        break missingId;
      }

      return new Board2MainBinding((LinearLayout) rootView, addFab2, board2Toolbar,
          main2RecyclerView, spinner2);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
